[{"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\index.js":"1","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\App.js":"2","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\reducers\\rootReducer.js":"4","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\reducers\\plans.js":"5","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\Home.jsx":"6","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\nav\\Nav.jsx":"7","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\Test.jsx":"8","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\containers\\map\\CreatePlan.jsx":"9","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\containers\\map\\ViewPlans.jsx":"10","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\actions\\action-types\\createPlan.js":"11","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\actions\\actions\\createPlan.js":"12","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\Button.jsx":"13","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\UtilMap.jsx":"14","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\CreatePlan.jsx":"15","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\ViewPlans.jsx":"16","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\Util.jsx":"17","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\static.js":"18","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\Live.jsx":"19"},{"size":808,"mtime":1612217674635,"results":"20","hashOfConfig":"21"},{"size":885,"mtime":1615698703233,"results":"22","hashOfConfig":"21"},{"size":375,"mtime":1612217674644,"results":"23","hashOfConfig":"21"},{"size":137,"mtime":1612217674643,"results":"24","hashOfConfig":"21"},{"size":903,"mtime":1612217674639,"results":"25","hashOfConfig":"21"},{"size":1083,"mtime":1612217674555,"results":"26","hashOfConfig":"21"},{"size":839,"mtime":1615698452664,"results":"27","hashOfConfig":"21"},{"size":1364,"mtime":1615698906964,"results":"28","hashOfConfig":"21"},{"size":460,"mtime":1612217674628,"results":"29","hashOfConfig":"21"},{"size":236,"mtime":1612217674633,"results":"30","hashOfConfig":"21"},{"size":39,"mtime":1612217674545,"results":"31","hashOfConfig":"21"},{"size":212,"mtime":1612217674549,"results":"32","hashOfConfig":"21"},{"size":185,"mtime":1612217674554,"results":"33","hashOfConfig":"21"},{"size":1484,"mtime":1612217674611,"results":"34","hashOfConfig":"21"},{"size":4915,"mtime":1612323608148,"results":"35","hashOfConfig":"21"},{"size":5187,"mtime":1612323987221,"results":"36","hashOfConfig":"21"},{"size":5096,"mtime":1612217674608,"results":"37","hashOfConfig":"21"},{"size":2649,"mtime":1612290625023,"results":"38","hashOfConfig":"39"},{"size":3165,"mtime":1615735674358,"results":"40","hashOfConfig":"21"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1pkyfpl",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"83"},"t3qla3",{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\index.js",[],["86","87"],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\App.js",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\reducers\\rootReducer.js",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\reducers\\plans.js",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\Home.jsx",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\nav\\Nav.jsx",["88","89"],"import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./style.css\";\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nfunction Nav() {\r\n    return <ul className=\"nav-menu\">\r\n        <li>\r\n            <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/view-plan\">View Plan</Link>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/create-plan\">Create Plan</Link>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/live\">Live</Link>\r\n        </li>\r\n        <li>\r\n            <a target=\"_blank\" href=\"https://github.com/ats1999/drone-air-mission-planning/blob/main/README.md\">Learn Server</a>\r\n        </li>\r\n        <li >\r\n            <a target=\"_blank\" href=\"https://github.com/ats1999/drone-air-mission-planning\"><GitHubIcon/></a>\r\n        </li>\r\n    </ul>\r\n}\r\n\r\nexport default Nav\r\n","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\Test.jsx",["90"],"import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nlet token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDBjM2ZiMDFjMWU3NDE1NWQ3ZjVmZWMiLCJpYXQiOjE2MTUxMjExNjR9.d5upKO5D7L7vNAc9zhETOqzaKwfdrBxXpceY-C4P3Dw\";\r\nlet socket;\r\nconst Test = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [token, setToken] = useState(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDBjM2ZiMDFjMWU3NDE1NWQ3ZjVmZWMiLCJpYXQiOjE2MTUxMjExNjR9.d5upKO5D7L7vNAc9zhETOqzaKwfdrBxXpceY-C4P3Dw\");\r\n\r\n  useEffect(()=>{\r\n\r\n    //return () => socket.disconnect();\r\n  },[]);\r\n\r\n  const handleJoin = () => {\r\n    socket = io(\"http://localhost:5001/\", {\r\n      query: {\r\n        token: token,\r\n        orgId: input,\r\n      },\r\n    });\r\n\r\n    socket.on('join',(data)=>{\r\n      console.log('join: ',data);\r\n    })\r\n\r\n    socket.on('test',data=>console.log('test->',data));\r\n  };\r\n\r\n  const testEvent=()=>{\r\n    socket.emit(\"join\", \"5283920058631409231\");\r\n  }\r\n  return (\r\n    <div>\r\n      <p>OrgId</p>\r\n      <input value={input} onChange={(e) => setInput(e.target.value)} />\r\n      <p>Token</p>\r\n      <input value={token} onChange={(e) => setToken(e.target.value)} />\r\n      <br/>\r\n      <button onClick={handleJoin}>Join</button>\r\n      <br/>\r\n      <button onClick={testEvent}>Test</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\containers\\map\\CreatePlan.jsx",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\containers\\map\\ViewPlans.jsx",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\actions\\action-types\\createPlan.js",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\actions\\actions\\createPlan.js",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\Button.jsx",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\UtilMap.jsx",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\CreatePlan.jsx",["91","92"],"import React,{useEffect} from 'react'\r\nimport { useState } from 'react';\r\nimport ReactMapGL from 'react-map-gl';\r\nimport {GeolocateControl,FullscreenControl,NavigationControl} from \"react-map-gl\";\r\nimport {Marker} from \"react-map-gl\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport AddLocationIcon from '@material-ui/icons/AddLocation';\r\nimport GetSelectedOperation from \"./Util\";\r\nimport GetCurrentFeature from \"./UtilMap\"\r\n\r\nconst useStyles = makeStyles({\r\n    operationContainer:{\r\n        position:\"absolute\",\r\n        bottom:0,\r\n        right:0,\r\n        backgroundColor:\"white\",\r\n        color:\"black\",\r\n        margin:5,\r\n        padding:5,\r\n        width:\"300px\",\r\n        height:300,\r\n        zIndex:1000,\r\n        boxShadow:'0px 0px 30px lightgreen',\r\n        border:\"4px solid lightgreen\",\r\n        '@media only screen and (max-width: 500px)':{\r\n            height:\"200px\",\r\n            width:\"300px\"\r\n        }\r\n    },\r\n    label:{\r\n        padding:5\r\n    }\r\n})\r\nfunction CreatePlan(props) {\r\n    const {store,addSource} = props;\r\n    const [viewport, setViewport] = useState({\r\n      width: \"100%\",\r\n      height: 500,\r\n      latitude: 26.127565,\r\n      longitude: 85.420509,\r\n      zoom: 8\r\n    });\r\n\r\n    const [operation, setOperation] = useState(\"select\");\r\n    const [clickedLngLat, setClickedLngLat] = useState(null);\r\n    const [curData, setCurData] = useState(null);\r\n    const [tmpData, setTmpData] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        if(curData){\r\n            addSource(curData,operation)\r\n        }\r\n    },[curData]);\r\n    let accessToken = localStorage.mapToken || process.env.REACT_APP_MAP_BOX_TOKEN;\r\n    return (\r\n        <div className=\"root-container\">\r\n            <ReactMapGL\r\n                onClick={(e)=>{\r\n                    setClickedLngLat(e.lngLat);\r\n                }}\r\n                {...viewport}\r\n                onViewportChange={nextViewport => setViewport(nextViewport)}\r\n                mapboxApiAccessToken={accessToken}\r\n                mapStyle={\"mapbox://styles/mapbox/streets-v11\"}\r\n            >\r\n                \r\n                <div style={{position: 'absolute', right: 10,bottom:10}}>\r\n                    <GeolocateControl />\r\n                    <FullscreenControl />\r\n                    <NavigationControl />\r\n                </div>\r\n\r\n                {/* display current longitude and latitude */}\r\n                <div style={{position: 'absolute', left: 10,bottom:30,padding:5,backgroundColor:\"white\",color:\"black\"}}>\r\n                    <b>lng: </b>{viewport.longitude} <br/>\r\n                    <b>lat: </b>{viewport.latitude}\r\n                </div>\r\n\r\n                {\r\n                    (clickedLngLat)&&\r\n                    <Marker offsetLeft={-20} offsetTop={-25} longitude={clickedLngLat[0]} latitude={clickedLngLat[1]}>\r\n                        <AddLocationIcon className=\"add_location_icon\" color=\"secondary\"/>\r\n                    </Marker>\r\n                }\r\n                <GetCurrentFeature operation={operation} data={tmpData}/>\r\n            </ReactMapGL>\r\n            \r\n            <Operations \r\n                operation={operation} \r\n                getOperation={setOperation}\r\n                flushData={(e)=>{\r\n                    setTmpData(null);\r\n                    setCurData(null);\r\n                    setClickedLngLat(null)\r\n                }}\r\n                mapProps={{\r\n                    clickedLngLat:clickedLngLat,\r\n                    setClickedLngLat:setClickedLngLat,\r\n                    setCurData:setCurData,\r\n                    curData:curData,\r\n                    tmpData:tmpData,\r\n                    setTmpData:setTmpData\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Operations=({getOperation,operation,mapProps,flushData})=>{\r\n    const classes = useStyles();\r\n    return <Card className={classes.operationContainer}>\r\n        <FormControl >\r\n        <InputLabel className={`${classes.label}`}>Add</InputLabel>\r\n        <Select \r\n            value={operation}\r\n            onChange={(e)=>{\r\n                getOperation(e.target.value);\r\n                flushData();\r\n            }} \r\n        >\r\n            <MenuItem value=\"select\">Select</MenuItem>\r\n            <MenuItem value=\"line\">Line</MenuItem>\r\n            <MenuItem value=\"point\">Point</MenuItem>\r\n            <MenuItem value=\"circle\">Circle</MenuItem>\r\n        </Select>\r\n    </FormControl>\r\n    <hr/>\r\n    {operation === \"select\" && <p className=\"muted__text\">Please select any operation</p>}\r\n\r\n        <GetSelectedOperation operation={operation} mapProps={mapProps}/>\r\n    </Card>\r\n}\r\nexport default CreatePlan\r\n","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\ViewPlans.jsx",[],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\Util.jsx",["93"],"import React,{useEffect} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles({\r\n    addButton:{\r\n        position:\"absolute\",\r\n        bottom:4,\r\n        left:4\r\n    },\r\n    uploadButton:{\r\n        position:\"absolute\",\r\n        bottom:4,\r\n        right:4\r\n    }\r\n});\r\nconst GetSelectedOperation=({operation,mapProps})=>{\r\n    switch(operation){\r\n        case \"point\":\r\n            return <PointOperation mapProps={mapProps}/>;\r\n\r\n        case 'line':\r\n            return <LineOperation mapProps={mapProps}/>;\r\n            \r\n        case 'circle':\r\n            return <CircleOperation mapProps={mapProps}/>;\r\n        default : return null;\r\n    }\r\n}\r\n\r\nconst CircleOperation=({mapProps})=>{\r\n    const classes = useStyles();\r\n    const [radius, setRadius] = React.useState(20);\r\n    useEffect(()=>{\r\n        if(mapProps && mapProps.clickedLngLat){\r\n            mapProps.setTmpData({\r\n                cords:mapProps.clickedLngLat,\r\n                radius:radius\r\n            });\r\n        }\r\n    },[mapProps.clickedLngLat,radius]);\r\n\r\n    return <div>\r\n        <p className=\"muted__text\">Click any where on the map to create add circle center point</p>\r\n        {\r\n            (mapProps&&mapProps.clickedLngLat)&&<>\r\n                <hr/>\r\n                <p>Your selected point</p>\r\n                <ul>\r\n                    <li>\r\n                        <b>Lon:</b> {mapProps.clickedLngLat[0]}\r\n                    </li>\r\n                    <li>\r\n                        <b>Lat:</b> {mapProps.clickedLngLat[1]}\r\n                    </li>\r\n                </ul>\r\n            </>\r\n        }\r\n        <div className=\"input_radius_container\">\r\n            <p>Radius</p>\r\n            <input \r\n                value={radius}\r\n                onChange={(e)=>setRadius(e.target.value)}\r\n                type=\"number\"\r\n                placeholder=\"radius in KM\"\r\n            />\r\n            <p>KM</p>\r\n        </div>\r\n        <Button variant=\"contained\" color=\"primary\" \r\n            size=\"small\" disabled={!mapProps||!mapProps.clickedLngLat}\r\n            className={classes.addButton}\r\n            onClick={(e)=>{\r\n                mapProps.setCurData({\r\n                    cords:mapProps.clickedLngLat,\r\n                    radius:radius\r\n                });\r\n                mapProps.setClickedLngLat(null);\r\n                mapProps.setTmpData(null);\r\n            }}\r\n            >\r\n            Add Circle \r\n        </Button>\r\n    </div>\r\n}\r\nconst LineOperation=({mapProps})=>{\r\n    const classes = useStyles();\r\n    return <div>\r\n        <p className=\"muted__text\">Click any where on the map to create add line point</p>\r\n\r\n        {\r\n            (mapProps&&mapProps.clickedLngLat)&&<>\r\n                <hr/>\r\n                <p>Your selected point</p>\r\n                <ul>\r\n                    <li>\r\n                        <b>Lon:</b> {mapProps.clickedLngLat[0]}\r\n                    </li>\r\n                    <li>\r\n                        <b>Lat:</b> {mapProps.clickedLngLat[1]}\r\n                    </li>\r\n                </ul>\r\n            </>\r\n        }\r\n        <Button variant=\"contained\" color=\"primary\" \r\n            size=\"small\" disabled={!mapProps||!mapProps.clickedLngLat}\r\n            className={classes.addButton}\r\n            onClick={(e)=>{\r\n                let data = mapProps.tmpData || [mapProps.clickedLngLat];\r\n                mapProps.setTmpData([...data,mapProps.clickedLngLat]);\r\n                mapProps.setClickedLngLat(null);\r\n            }}\r\n            >\r\n            Add point\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"primary\" \r\n            size=\"small\" disabled={!mapProps.tmpData}\r\n            className={classes.uploadButton}\r\n            onClick={(e)=>{\r\n                mapProps.setCurData(mapProps.tmpData);\r\n                mapProps.setClickedLngLat(null);\r\n                mapProps.setTmpData(null);\r\n            }}\r\n            >\r\n            Add Line \r\n        </Button>\r\n    </div>\r\n}\r\n\r\nconst PointOperation=({mapProps})=>{\r\n    const classes = useStyles();\r\n    return <div>\r\n        <p className=\"muted__text\">Click any where on the map to create point</p>\r\n\r\n        {\r\n            (mapProps&&mapProps.clickedLngLat)&&<>\r\n                <hr/>\r\n                <p>Your selected point</p>\r\n                <ul>\r\n                    <li>\r\n                        <b>Lon:</b> {mapProps.clickedLngLat[0]}\r\n                    </li>\r\n                    <li>\r\n                        <b>Lat:</b> {mapProps.clickedLngLat[1]}\r\n                    </li>\r\n                </ul>\r\n            </>\r\n        }\r\n        <Button variant=\"contained\" color=\"primary\" \r\n            size=\"small\" disabled={!mapProps||!mapProps.clickedLngLat}\r\n            className={classes.addButton}\r\n            onClick={(e)=>{\r\n                mapProps.setCurData(mapProps.clickedLngLat);\r\n                mapProps.setClickedLngLat(null);\r\n            }}\r\n            >\r\n            Add point\r\n        </Button>\r\n    </div>\r\n}\r\n\r\nexport default GetSelectedOperation;","C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\map\\static.js",["94"],"const config = {\r\n    \"circleSteps\":50,\r\n    \"lineSignmentLength\":1\r\n};\r\nconst geoJsons = {\r\n    lines:[],\r\n    points:[],\r\n    polygons:[], // a circle can be made by polygons \r\n}\r\nconst {circle,point,lineString,lineChunk,along,distance} = require(\"@turf/turf\");\r\n\r\n/**\r\n * generate coordinates for circle.\r\n * @param {Array} center [longitude,latitude]\r\n * @param {Number} radius radius of cirlcle\r\n */\r\nconst circleToPolygon=(center,radius)=>{\r\n    const steps = config.circleSteps || 50;\r\n    const options = {steps: steps, units: 'kilometers',properties:{\r\n        madeUsing:\"Circle to polygon\"\r\n    }};\r\n    const circleCords = circle(center, radius, options);\r\n    return circleCords;\r\n}\r\n\r\n/**\r\n * get geojson for the coordinates.\r\n * @param {Array} center [longitude,latitude]\r\n */\r\nconst getPoint=(center)=>{\r\n    const pointGeoJson = point(center);\r\n    return pointGeoJson;\r\n}\r\n\r\nconst getLineChunksForLineString=(cords)=>{\r\n    let lineCords = [];\r\n    for(let i=0; i<cords.length-1; i++){\r\n        const lineChunk = getLineChunk(cords[i],cords[i+1]);\r\n        lineCords = [...lineCords,...lineChunk];\r\n    }\r\n    return lineString(lineCords);\r\n}\r\n\r\n/**\r\n * Get line chunks between two points\r\n * @param {Array} sp [lon,lat] start point of line sigment\r\n * @param {Arrat} ep [lon,lat] end point of the line sigment \r\n */\r\nconst getLineChunk=(sp,ep)=>{\r\n    const dist = parseInt(distance(point(sp),point(ep),{units:\"kilometers\"}))*1000;\r\n    let cp = sp; // current point\r\n\r\n    // distance between generated two points\r\n    let sigmentLength = dist/config.lineSignmentLength || dist/1;\r\n        sigmentLength = parseInt(sigmentLength);\r\n\r\n    const chunkCords = [sp];\r\n    for(let i=0; i<dist; i++){\r\n        const line = lineString([cp,ep]);\r\n\r\n        // new point\r\n        let np = along(line, sigmentLength, { units:\"kilometers\"});\r\n        chunkCords.push(np.geometry.coordinates);\r\n    }\r\n    chunkCords.push(ep);\r\n    return chunkCords;\r\n}\r\nexport default function generateData(staticInput){\r\n    //generate geojson polygon for each circle\r\n    staticInput.circles.forEach((circle,idx)=>{\r\n        const polygon = circleToPolygon(circle.cords,circle.radius);\r\n        geoJsons.polygons.push(polygon);\r\n    });\r\n\r\n    //generate geojson points\r\n    staticInput.points.forEach((pointInput,idx)=>{\r\n        const pointGeoJson = getPoint(pointInput);\r\n        geoJsons.points.push(pointGeoJson);\r\n    });\r\n\r\n    // generate lines\r\n    staticInput.lines.forEach((line,idx)=>{\r\n        const lineGeoJson = getLineChunksForLineString(line);\r\n        geoJsons.lines.push(lineGeoJson);\r\n    });\r\n\r\n    return JSON.stringify(geoJsons);\r\n}",["95","96"],"C:\\Users\\Rahul kumar\\desktop\\Projects\\drone-air-mission-planning\\client\\src\\components\\Live.jsx",["97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":20,"column":13,"nodeType":"104","endLine":20,"endColumn":113},{"ruleId":"102","severity":1,"message":"103","line":23,"column":13,"nodeType":"104","endLine":23,"endColumn":93},{"ruleId":"105","severity":1,"message":"106","line":4,"column":5,"nodeType":"107","messageId":"108","endLine":4,"endColumn":10},{"ruleId":"105","severity":1,"message":"109","line":40,"column":12,"nodeType":"107","messageId":"108","endLine":40,"endColumn":17},{"ruleId":"110","severity":1,"message":"111","line":58,"column":7,"nodeType":"112","endLine":58,"endColumn":16,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":41,"column":7,"nodeType":"112","endLine":41,"endColumn":38,"suggestions":"115"},{"ruleId":"105","severity":1,"message":"116","line":10,"column":32,"nodeType":"107","messageId":"108","endLine":10,"endColumn":41},{"ruleId":"98","replacedBy":"117"},{"ruleId":"100","replacedBy":"118"},{"ruleId":"110","severity":1,"message":"119","line":67,"column":8,"nodeType":"112","endLine":67,"endColumn":10,"suggestions":"120"},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","'store' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addSource' and 'operation'. Either include them or remove the dependency array.","ArrayExpression",["123"],"React Hook useEffect has a missing dependency: 'mapProps'. Either include it or remove the dependency array.",["124"],"'lineChunk' is assigned a value but never used.",["121"],["122"],"React Hook useEffect has missing dependencies: 'dronePos.latitude' and 'dronePos.longitude'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDronePos' needs the current value of 'dronePos.longitude'.",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [addSource, curData, operation]",{"range":"132","text":"133"},"Update the dependencies array to be: [mapProps, mapProps.clickedLngLat, radius]",{"range":"134","text":"135"},"Update the dependencies array to be: [dronePos.latitude, dronePos.longitude]",{"range":"136","text":"137"},[1819,1828],"[addSource, curData, operation]",[1091,1122],"[mapProps, mapProps.clickedLngLat, radius]",[1616,1618],"[dronePos.latitude, dronePos.longitude]"]